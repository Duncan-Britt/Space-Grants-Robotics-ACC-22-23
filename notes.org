* Tests to run once the robot is build
- We should code the robot to turn on a light when it detects and obstacle and turn off a light when it believes there is no obstacle. The we should place the robot in front of various obstacles to see if we have successfully detected the obstalces.
  - In order to do this test we'll need sensors attached to the robot.
  - We might discover that we need to change the way we detect obstacles, which could involve hardware and/or software.
- We should test our robot's ability to determine its location. We can do this perhaps using bluetooth or an led display. We could tell it to move in certain directions for abitrary amounts of time and see how accurate its estimate of its position is.
- We should see if the robot can turn and travel a certain distance by initalizing it with some minor pose queue and seeing if it's able to loop through. We need to do this to tune our pid algorithms.
  - we could first forget the queue part and just have it try to achieve just one desired pose.
  - In order to perform this test we need the robot to be set up for motion. So we need the motors and wheels attached, wired, and powered. We also need the gyroscope and any other sensors we'll need to determine the position of the robot.
  - We need to do this test repeatedly to determine the appropriate coefficients for our pid algorithm. We should expect it to be successful on the first go.
- We should test our robots path planning & obstacle avoidance by creating mazes for it.
  - We need to make sure the robot slows down fast enough when it finds an obstacle.
  - If the robot doesn't do a good job path planning, if it runs out of memory, etc, we may need to rethink how we navigate.



* Educational Resources, Notes
** Odometry
https://www.youtube.com/watch?v=ZW7T6EFyYnc
Forward motion is the average of left and right wheels motion
$$ fwd = \frac{left + right}{2} $$

$$ \theta = \frac{right - left}{2r} $$
(r = the radius of the robot -> the distance between the center and the wheels.)

** Path Planning
Cell decomposition path planning
- approximate cell decomposition

Wavefront path planning, aka NF1, often called  grassfire, is an efficient and simple-to-implement tech-
nique for finding routes in such fixed-size cell arrays 

I wrote an implementation of the A* algorithm. This is memory intensive, and that's a problem. Also, it may be unnecessary. The obstacles that bowswer will face aren't likely to lead bowser to serious elaborate dead ends. It should be sufficient to tell Bowser to just head in the right general direction
and avoid obstacles.

We could find the borders of obstacles and place nodes past the ends of the borders of obstacles. This would speed up the A* algo and cut down on memroy use. Grid could be used for the unknown areas.

       . . . . . . . . . (temp target)
       . . . . . . . . . . . . . . .
       . . . . . . . . . . . . . . .
      (Node) (----OBSTACLE-----) . .
                              !  . .
		________      !  . .
		!Bowser!      !  . .
		-------     ____ . .
		           (Node). .
           
** Misc
Beware of multiple libraries using the same timer: https://youtu.be/lOTDSQua--s?t=46


** Code Snippets
#+begin_src C++ Possible Interface for Controlling the wheels

  void loop() {
      //...
      // Going forward
      motors.setSpeed(100, 100, 100, 100);
      // Turning Left
      motors.setSpeed(-100, 100, -100, 100);
      //...
  }

#+end_src
  
#+begin_src C++ Checking Wheel Encoders
  #include <encoders.h> // need to implement

  const int CLICKS_PER_ROTATION = 12; // might be one for hall effect sensors
  const float GEAR_RATIO = 29.86F; // is this relevant?
  const float WHEEL_DIAMETER = 3.2; // (cm) need to know 
  const int WHEEL_CIRCUMFERENCE = 10.0531; // (cm) need to know

  float Slf = 0.0F; // (cm)
  float Srf = 0.0F; // (cm)
  float Slb = 0.0F; // (cm)
  float Srb = 0.0F; // (cm)

  void checkEncoders() {
      static Encoders encoders; // need to implement

      static long countsLeftFront = 0;
      static long countsRightFront = 0;
      static long countsLeftBack = 0;
      static long countsRightBack = 0;
      static long prevLeftFront = 0;
      static long prevRightFront = 0;
      static long prevLeftBack = 0;
      static long prevRightBack = 0;

      static unsigned long currentMillis;
      static unsigned long prevMillis;
      const unsigned long PERIOD = 50; // (ms)
      currentMillis = millis();

      if(currentMillis > previousMillis + PERIOD) {
	  countsLeftFront += encoders.getCountsAndResetLeftFront();
	  countsRightFront += encoders.getCountsAndResetRightFront();
	  countsLeftBack += encoders.getCountsAndResetLeftBack();
	  countsRightBack += encoders.getCountsAndResetRightBack();

	  Slf += ((countsLeftFront - prevLeftFront) / (CLICKS_PER_ROTATION + GEAR_RATIO) * WHEEL_CIRCUMFERENCE);
	  Srf += ((countsRightFront - prevRightFront) / (CLICKS_PER_ROTATION + GEAR_RATIO) * WHEEL_CIRCUMFERENCE);
	  Slb += ((countsLeftBack - prevLeftBack) / (CLICKS_PER_ROTATION + GEAR_RATIO) * WHEEL_CIRCUMFERENCE);
	  Srb += ((countsRightBack - prevRightBack) / (CLICKS_PER_ROTATION + GEAR_RATIO) * WHEEL_CIRCUMFERENCE);

	  prevMillis = currentMillis;
      }
  }

#+end_src

#+begin_src C++ Demo Ultrasonic sensor
  const int ECHO_PIN = 30; // could use #define instead
  const int TRIG_PIN = 17;

  const int MAX_DISTANCE = 200; //(200 cm / 2 meters)

  // Ultrasonic timing
  unsigned long currentMillis;
  unsigned long previousMillis;
  const unsigned long US_PERIOD = 100;

  // current US distance reading
  int distance = 0;

  void setup() {
      pinMode(ECHO_PIN, INPUT);
      pinMode(TRIG_PIN, OUTPUT);

      delay(1000);
  }

  void loop() {
      //...
      usReadCm();
      //...
  }

  void usReadCm() {
      currentMillis = millis();
      if (currentMillis > previousMillis + US_PERIOD) {
	  // Clears the TRIG_PIN (set low)
	  digitalWrite(TRIG_PIN, LOW);
	  delayMicroseconds(2);

	  // Sets the TRIG_PIN HIGH (ACTIVE) for 10 microseconds
	  digitalWrite(TRIG_PIN, HIGH);
	  delayMicroseconds(10);
	  digitalWrite(TRIG_PIN, LOW);

	  // Reads the ECHO_PIN, returns the sound wave travel time in microseconds
	  // note the duration (38000 microseconds) that will allow for reading up max distance supported by the sensor
	  long duration = pulseIn(ECHO_PIN, HIGH, 38000);
	  // Calculating the distance
	  distance = duration * 0.034 / 2; // Time of flight equation: Speed of sound wave divided by 2

	  // apply limits
	  if (distance > MAX_DISTANCE) distance = MAX_DISTANCE;
	  if (distance == 0) distance = MAX_DISTANCE;

	  // Display the distance on the Serial Monitor
	  Serial.print("Distance: ");
	  Serial.print(distance);
	  Serial.println(" cm");

	  // update the prevmillis
	  previousMillis = currentMillis;
      }
  }
#+end_src

#+begin_src C++ Demo Object following behavior + Ultrasonic sensor
  const int ECHO_PIN = 30; // could use #define instead
  const int TRIG_PIN = 17;

  const int MAX_DISTANCE = 200; //(200 cm / 2 meters)

  const float DISTANCE_FACTOR = MAX_DISTANCE / 100;
  const float STOP_DISTANCE = 5;

  const float MOTOR_BASE_SPEED = 300.0;
  const int MOTOR_MIN_SPEED = 30;
  const float MOTOR_FACTOR = MOTOR_BASE_SPEED / 100;

  // Ultrasonic timing
  unsigned long currentMillis;
  unsigned long previousMillis;
  const unsigned long US_PERIOD = 100;

  // Motor Timing
  unsigned long motorCm;
  unsigned long motorPm;
  const unsigned long MOTOR_PERIOD = 50;

  // current US distance reading
  float distance = 0;

  void setup() {
      pinMode(ECHO_PIN, INPUT);
      pinMode(TRIG_PIN, OUTPUT);

      delay(1000);
  }

  void loop() {
      //...
      usReadCm();
      setMotors();
      //...
  }

  void setMotors() {
      motorCm = millis();
      if (motorCm > motorPm + MOTOR_PERIOD) {
	  float leftSpeed = MOTOR_BASE_SPEED;
	  float rightSpeed = MOTOR_BASE_SPEED;

	  if (distance <= MAX_DISTANCE) {

	      // determine the magnitude of the distance by taking the difference (shortt distance = high magnitude)
	      // divide by the DISTANCE_FACTOR to ensure uniform response as MAX_DISTANCE changes
	      // This maps the distance range (1 - MAX_RANGE) to 0-100 for magnitude
	      float magnitude = (float)(MAX_DISTANCE - distance) / DISTANCE_FACTOR;

	      leftSpeed = MOTOR_BASE_SPEED - (magnitude * MOTOR_FACTOR);
	      rightSpeed = MAX_DISTANCE - (magnitude * MOTOR_FACTOR);	      
	  }

	  if(leftSpeed < MOTOR_MIN_SPEED) leftSpeed = MOTOR_MIN_SPEED;
	  if(rightSpeed < MOTOR_MIN_SPEED) rightSpeed = MOTOR_MIN_SPEED;

	  if(distance <= STOP_DISTANCE) {
	      leftSpeed = 0;
	      rightSpeed = 0;
	  }

	  Serial.print("Left: ");
	  Serial.print(leftSpeed);
	  Serial.print(" Right: ");
	  Serial.print(rightSpeed);
      }
  }

  void usReadCm() {
      currentMillis = millis();
      if (currentMillis > previousMillis + US_PERIOD) {
	  // Clears the TRIG_PIN (set low)
	  digitalWrite(TRIG_PIN, LOW);
	  delayMicroseconds(2);

	  // Sets the TRIG_PIN HIGH (ACTIVE) for 10 microseconds
	  digitalWrite(TRIG_PIN, HIGH);
	  delayMicroseconds(10);
	  digitalWrite(TRIG_PIN, LOW);

	  // Reads the ECHO_PIN, returns the sound wave travel time in microseconds
	  // note the duration (38000 microseconds) that will allow for reading up max distance supported by the sensor
	  long duration = pulseIn(ECHO_PIN, HIGH, 38000);
	  // Calculating the distance
	  distance = duration * 0.034 / 2; // Time of flight equation: Speed of sound wave divided by 2

	  // apply limits
	  if (distance > MAX_DISTANCE) distance = MAX_DISTANCE;
	  if (distance == 0) distance = MAX_DISTANCE;

	  // Display the distance on the Serial Monitor
	  Serial.print("Distance: ");
	  Serial.print(distance);
	  Serial.println(" cm");

	  // update the prevmillis
	  previousMillis = currentMillis;
      }
  }
#+end_src

#+begin_src C++ Servo Control Demo
  #include <Servo.h> // must be installed

  Servo headServo; // create servo object ot control a servo

  const HEAD_DEBUG = true;

  // Head Servo Timing
  unsigned long headCm;
  unsigned long headPm;
  const unsigned long HEAD_MOVEMENT_PEARIOD = 100;

  // head servo constants
  const int HEAD_SERVO_PIN = 0;
  const int NUM_HEAD_POSITIONS = 7;
  const int HEAD_POSITOINS[NUM_HEAD_POSITIONS] = {135, 120, 105, 90, 75, 60, 45};

  // head servo data
  boolean headDirectionClockwise = true;
  int currentHeadPosition = 0;

  void setup() {
      Serial.begin(57600);

      // initialize the head position to start
      headServo.attach(HEAD_SERVO_PIN);
      headServo.write(40);

      // start delay
      delay(3000);
  }

  void loop() {
      //...
      moveHead();
      //...
  }


  void moveHead() {
      headCm = millis();
      if(headCm > headPm + HEAD_MOVEMENT_PERIOD) {

	  // head debug output
	  if (HEAD_DEBUG) {
	      Serial.print(currentHeadPosition);
	      Serial.print(" - ");
	      Serial.println(HEAD_POSITIONS[currentHeadPosition]);
	  }

	  // position head to the current position in the array
	  headServo.write(HEAD_POSITIONS[currentHeadPosition]);

	  if (headDrietionClockwise) {
	      if (currentHeadPosition >= (NUM_HEAD_POSITIONS - 1)) {
		  headDirectionClockwise = !headDirectionClockwise;
		  currentHeadPosition--;
	      }
	      else {
		  currentHeadPosition++;
	      }
	  }
	  else {
	      if (currentHeadPosition <= 0) {
		  headDirectionClockwise = !headDirectionClockwise;
		  currentHeadPositions++;		  
	      }
	      else {
		  currentHeadPosition--;
	      }
	  }

	  // reset previous millis
	  headPm = headCm;
      }
  }
#+end_src

Servo Control & Ultrasonic Sensor Demo [[https://www.youtube.com/watch?v=lOTDSQua--s&list=PL0_aoTs5sGaQFjNSnyjTT8aiXWuILTouE&index=5]]
