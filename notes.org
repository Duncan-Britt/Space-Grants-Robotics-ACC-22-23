
* Odometry
https://www.youtube.com/watch?v=ZW7T6EFyYnc
Forward motion is the average of left and right wheels motion
$$ fwd = \frac{left + right}{2} $$

$$ \theta = \frac{right - left}{2r} $$
(r = the radius of the robot -> the distance between the center and the wheels.)

 


* TODO Path planning
I wrote an implementation of the A* algorithm. This is memory intensive, and that's a problem. Also, it may be unnecessary. The obstacles that bowswer will face aren't likely to lead bowser to serious elaborate dead ends. It should be sufficient to tell Bowser to just head in the right general direction
and avoid obstacles.

** Strategy
- Orient towards the target
- move toward the target until an obstacle is encountered
- Analyze surroundings
  Produce a grid of the terrain immediate vicinity with obstacles
- Use A* algorithm to move beyond the obstacles in the direction of the target
- Abandon Grid. Orient toward target. Keep going until another obstacle is encountered.

** Problems with this approach:
If we ran into an obstacle like this:

     !!!!!!!!!
     !       !
     !   X   !
     !       !
     !       !!!!!

We could get stuck going forward and backwards. That said, we are unlikely to encounter this kind of obstacle. Perhaps a work around would be:
- If an obstacle is encountered in the process of navigating around an obstacle:
  - Expand grid, preserving previous obstacle knowledge.

** Optimizations
We could find the borders of obstacles and place nodes past the ends of the borders of obstacles. This would speed up the A* algo and cut down on memroy use. Grid could be used for the unkown areas.

       . . . . . . . . . (temp target)
       . . . . . . . . . . . . . . .
       . . . . . . . . . . . . . . .
      (Node) (----OBSTACLE-----) . .
                              !  . .
		________      !  . .
		!Bowser!      !  . .
		-------     ____ . .
		           (Node). .
      

** old stuff
1. Given
- A 2D array representing a grid on a plane populated with booleans representing the presence of an obstacle
  on each grid space
- A starting position Pi
- A target position Pf
Choose a path (the shortest?) through that space from Pi to Pf. Represent the path using a collection of
points on the path. The direction between each point will be assumed to be a straight line from one to the next.

2. Given
- A 2D array representing a grid on a plane populated with integers representing the probability of an obstacle
  on each grid space
- A starting position Pi
- A target position Pf
Choose a path (the shortest?) through that space from Pi to Pf. Represent the path using a collection of
points on the path. The direction between each point will be assumed to be a straight line from one to the next.

3. Given
- A 2D array representing a grid on a plane populated with integers representing the probability of an obstacle
  on each grid space
- A starting position Pi
- A target position Pf
- The dimensions (l x w) of the Robot in units of grid spaces
Choose a path (the shortest?) through that space from Pi to Pf. Represent the path using a collection of
points on the path. The direction between each point will be assumed to be a straight line from one to the next.

*** Solution
Each space in the grid is a node. For each node (gridspace), cost can be computed:
G cost = distance from the starting node
H cost (heuristic) = distance from the end node
F cost = G cost + H Cost

Need a priority queue

Look at the nodes immediately surrounding the current position, and choose the node with the lowest F cost
(H cost is tie-breaker)
Repeat the process from this new chosen node (G cost is still the distance from the starting node, H cost
is still the distance from the target node)

A* Search Algorithm

-------------

OPEN => the set of nodes to be evaluated
CLOSED => the set of nodes already evaluated
add the start node to OPEN

loop
  current = node in OPEN with the lowest f_cost
  remove current from OPEN
  add current to CLOSED

  if current is the target node //path has been found
    return

  foreach neighbour of the current node
    if neighbour is not traversable or neighbour is in CLOSED
      skip to the next neighbour


    if new path to neighbour is shortor OR neighboor is not in OPEN
    set f_cost of neighbour
    set parent of neighbour to current
    if neighbour is not in OPEN
      add neighbour to OPEN
      
* Notes
Beware of multiple libraries using the same timer: https://youtu.be/lOTDSQua--s?t=46

* TODO Hall Effect Sensor Wheel Encoders
Returns hall effect sensor data (a number of clicks)

* Code Snippets
#+begin_src C++ Possible Interface for Controlling the wheels

  void loop() {
      //...
      // Going forward
      motors.setSpeed(100, 100, 100, 100);
      // Turning Left
      motors.setSpeed(-100, 100, -100, 100);
      //...
  }

#+end_src
  
#+begin_src C++ Checking Wheel Encoders
  #include <encoders.h> // need to implement

  const int CLICKS_PER_ROTATION = 12; // might be one for hall effect sensors
  const float GEAR_RATIO = 29.86F; // is this relevant?
  const float WHEEL_DIAMETER = 3.2; // (cm) need to know 
  const int WHEEL_CIRCUMFERENCE = 10.0531; // (cm) need to know

  float Slf = 0.0F; // (cm)
  float Srf = 0.0F; // (cm)
  float Slb = 0.0F; // (cm)
  float Srb = 0.0F; // (cm)

  void checkEncoders() {
      static Encoders encoders; // need to implement

      static long countsLeftFront = 0;
      static long countsRightFront = 0;
      static long countsLeftBack = 0;
      static long countsRightBack = 0;
      static long prevLeftFront = 0;
      static long prevRightFront = 0;
      static long prevLeftBack = 0;
      static long prevRightBack = 0;

      static unsigned long currentMillis;
      static unsigned long prevMillis;
      const unsigned long PERIOD = 50; // (ms)
      currentMillis = millis();

      if(currentMillis > previousMillis + PERIOD) {
	  countsLeftFront += encoders.getCountsAndResetLeftFront();
	  countsRightFront += encoders.getCountsAndResetRightFront();
	  countsLeftBack += encoders.getCountsAndResetLeftBack();
	  countsRightBack += encoders.getCountsAndResetRightBack();

	  Slf += ((countsLeftFront - prevLeftFront) / (CLICKS_PER_ROTATION + GEAR_RATIO) * WHEEL_CIRCUMFERENCE);
	  Srf += ((countsRightFront - prevRightFront) / (CLICKS_PER_ROTATION + GEAR_RATIO) * WHEEL_CIRCUMFERENCE);
	  Slb += ((countsLeftBack - prevLeftBack) / (CLICKS_PER_ROTATION + GEAR_RATIO) * WHEEL_CIRCUMFERENCE);
	  Srb += ((countsRightBack - prevRightBack) / (CLICKS_PER_ROTATION + GEAR_RATIO) * WHEEL_CIRCUMFERENCE);

	  prevMillis = currentMillis;
      }
  }

#+end_src

#+begin_src C++ Demo Ultrasonic sensor
  const int ECHO_PIN = 30; // could use #define instead
  const int TRIG_PIN = 17;

  const int MAX_DISTANCE = 200; //(200 cm / 2 meters)

  // Ultrasonic timing
  unsigned long currentMillis;
  unsigned long previousMillis;
  const unsigned long US_PERIOD = 100;

  // current US distance reading
  int distance = 0;

  void setup() {
      pinMode(ECHO_PIN, INPUT);
      pinMode(TRIG_PIN, OUTPUT);

      delay(1000);
  }

  void loop() {
      //...
      usReadCm();
      //...
  }

  void usReadCm() {
      currentMillis = millis();
      if (currentMillis > previousMillis + US_PERIOD) {
	  // Clears the TRIG_PIN (set low)
	  digitalWrite(TRIG_PIN, LOW);
	  delayMicroseconds(2);

	  // Sets the TRIG_PIN HIGH (ACTIVE) for 10 microseconds
	  digitalWrite(TRIG_PIN, HIGH);
	  delayMicroseconds(10);
	  digitalWrite(TRIG_PIN, LOW);

	  // Reads the ECHO_PIN, returns the sound wave travel time in microseconds
	  // note the duration (38000 microseconds) that will allow for reading up max distance supported by the sensor
	  long duration = pulseIn(ECHO_PIN, HIGH, 38000);
	  // Calculating the distance
	  distance = duration * 0.034 / 2; // Time of flight equation: Speed of sound wave divided by 2

	  // apply limits
	  if (distance > MAX_DISTANCE) distance = MAX_DISTANCE;
	  if (distance == 0) distance = MAX_DISTANCE;

	  // Display the distance on the Serial Monitor
	  Serial.print("Distance: ");
	  Serial.print(distance);
	  Serial.println(" cm");

	  // update the prevmillis
	  previousMillis = currentMillis;
      }
  }
#+end_src

#+begin_src C++ Demo Object following behavior + Ultrasonic sensor
  const int ECHO_PIN = 30; // could use #define instead
  const int TRIG_PIN = 17;

  const int MAX_DISTANCE = 200; //(200 cm / 2 meters)

  const float DISTANCE_FACTOR = MAX_DISTANCE / 100;
  const float STOP_DISTANCE = 5;

  const float MOTOR_BASE_SPEED = 300.0;
  const int MOTOR_MIN_SPEED = 30;
  const float MOTOR_FACTOR = MOTOR_BASE_SPEED / 100;

  // Ultrasonic timing
  unsigned long currentMillis;
  unsigned long previousMillis;
  const unsigned long US_PERIOD = 100;

  // Motor Timing
  unsigned long motorCm;
  unsigned long motorPm;
  const unsigned long MOTOR_PERIOD = 50;

  // current US distance reading
  float distance = 0;

  void setup() {
      pinMode(ECHO_PIN, INPUT);
      pinMode(TRIG_PIN, OUTPUT);

      delay(1000);
  }

  void loop() {
      //...
      usReadCm();
      setMotors();
      //...
  }

  void setMotors() {
      motorCm = millis();
      if (motorCm > motorPm + MOTOR_PERIOD) {
	  float leftSpeed = MOTOR_BASE_SPEED;
	  float rightSpeed = MOTOR_BASE_SPEED;

	  if (distance <= MAX_DISTANCE) {

	      // determine the magnitude of the distance by taking the difference (shortt distance = high magnitude)
	      // divide by the DISTANCE_FACTOR to ensure uniform response as MAX_DISTANCE changes
	      // This maps the distance range (1 - MAX_RANGE) to 0-100 for magnitude
	      float magnitude = (float)(MAX_DISTANCE - distance) / DISTANCE_FACTOR;

	      leftSpeed = MOTOR_BASE_SPEED - (magnitude * MOTOR_FACTOR);
	      rightSpeed = MAX_DISTANCE - (magnitude * MOTOR_FACTOR);	      
	  }

	  if(leftSpeed < MOTOR_MIN_SPEED) leftSpeed = MOTOR_MIN_SPEED;
	  if(rightSpeed < MOTOR_MIN_SPEED) rightSpeed = MOTOR_MIN_SPEED;

	  if(distance <= STOP_DISTANCE) {
	      leftSpeed = 0;
	      rightSpeed = 0;
	  }

	  Serial.print("Left: ");
	  Serial.print(leftSpeed);
	  Serial.print(" Right: ");
	  Serial.print(rightSpeed);
      }
  }

  void usReadCm() {
      currentMillis = millis();
      if (currentMillis > previousMillis + US_PERIOD) {
	  // Clears the TRIG_PIN (set low)
	  digitalWrite(TRIG_PIN, LOW);
	  delayMicroseconds(2);

	  // Sets the TRIG_PIN HIGH (ACTIVE) for 10 microseconds
	  digitalWrite(TRIG_PIN, HIGH);
	  delayMicroseconds(10);
	  digitalWrite(TRIG_PIN, LOW);

	  // Reads the ECHO_PIN, returns the sound wave travel time in microseconds
	  // note the duration (38000 microseconds) that will allow for reading up max distance supported by the sensor
	  long duration = pulseIn(ECHO_PIN, HIGH, 38000);
	  // Calculating the distance
	  distance = duration * 0.034 / 2; // Time of flight equation: Speed of sound wave divided by 2

	  // apply limits
	  if (distance > MAX_DISTANCE) distance = MAX_DISTANCE;
	  if (distance == 0) distance = MAX_DISTANCE;

	  // Display the distance on the Serial Monitor
	  Serial.print("Distance: ");
	  Serial.print(distance);
	  Serial.println(" cm");

	  // update the prevmillis
	  previousMillis = currentMillis;
      }
  }
#+end_src

#+begin_src C++ Servo Control Demo
  #include <Servo.h> // must be installed

  Servo headServo; // create servo object ot control a servo

  const HEAD_DEBUG = true;

  // Head Servo Timing
  unsigned long headCm;
  unsigned long headPm;
  const unsigned long HEAD_MOVEMENT_PEARIOD = 100;

  // head servo constants
  const int HEAD_SERVO_PIN = 0;
  const int NUM_HEAD_POSITIONS = 7;
  const int HEAD_POSITOINS[NUM_HEAD_POSITIONS] = {135, 120, 105, 90, 75, 60, 45};

  // head servo data
  boolean headDirectionClockwise = true;
  int currentHeadPosition = 0;

  void setup() {
      Serial.begin(57600);

      // initialize the head position to start
      headServo.attach(HEAD_SERVO_PIN);
      headServo.write(40);

      // start delay
      delay(3000);
  }

  void loop() {
      //...
      moveHead();
      //...
  }


  void moveHead() {
      headCm = millis();
      if(headCm > headPm + HEAD_MOVEMENT_PERIOD) {

	  // head debug output
	  if (HEAD_DEBUG) {
	      Serial.print(currentHeadPosition);
	      Serial.print(" - ");
	      Serial.println(HEAD_POSITIONS[currentHeadPosition]);
	  }

	  // position head to the current position in the array
	  headServo.write(HEAD_POSITIONS[currentHeadPosition]);

	  if (headDrietionClockwise) {
	      if (currentHeadPosition >= (NUM_HEAD_POSITIONS - 1)) {
		  headDirectionClockwise = !headDirectionClockwise;
		  currentHeadPosition--;
	      }
	      else {
		  currentHeadPosition++;
	      }
	  }
	  else {
	      if (currentHeadPosition <= 0) {
		  headDirectionClockwise = !headDirectionClockwise;
		  currentHeadPositions++;		  
	      }
	      else {
		  currentHeadPosition--;
	      }
	  }

	  // reset previous millis
	  headPm = headCm;
      }
  }
#+end_src

Servo Control & Ultrasonic Sensor Demo [[https://www.youtube.com/watch?v=lOTDSQua--s&list=PL0_aoTs5sGaQFjNSnyjTT8aiXWuILTouE&index=5]]
